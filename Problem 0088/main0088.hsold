{-

A natural number, N, that can be written as the sum and product of a given set of at least two natural numbers, {a1, a2, ... , ak} is called a product-sum number: N = a1 + a2 + ... + ak = a1 × a2 × ... × ak.

For example, 6 = 1 + 2 + 3 = 1 × 2 × 3.

For a given set of size, k, we shall call the smallest N with this property a minimal product-sum number. The minimal product-sum numbers for sets of size, k = 2, 3, 4, 5, and 6 are as follows.

k=2: 4 = 2 × 2 = 2 + 2
k=3: 6 = 1 × 2 × 3 = 1 + 2 + 3
k=4: 8 = 1 × 1 × 2 × 4 = 1 + 1 + 2 + 4
k=5: 8 = 1 × 1 × 2 × 2 × 2 = 1 + 1 + 2 + 2 + 2
k=6: 12 = 1 × 1 × 1 × 1 × 2 × 6 = 1 + 1 + 1 + 1 + 2 + 6

Hence for 2≤k≤6, the sum of all the minimal product-sum numbers is 4+6+8+12 = 30; note that 8 is only counted once in the sum.

In fact, as the complete set of minimal product-sum numbers for 2≤k≤12 is {4, 6, 8, 12, 15, 16}, the sum is 61.

What is the sum of all the minimal product-sum numbers for 2≤k≤12000?

-}

import           Data.List           (nub, sort)
import           Data.Numbers.Primes (primeFactors)

-- For a given numeric list, find all of the partitions of that list
partitions :: [Int] -> [[[Int]]]
partitions [] = [[[]]]
partitions [x] = [[[x]]]
partitions (x:xs) = [[x]:p | p <- partitions xs] ++
                    [(x:ys):yss | (ys:yss) <- partitions xs]

-- Find the set of factorizations of a number n
factorize :: Int -> [[Int]]
factorize n =  ppFactor
    where
        pFact = primeFactors n
        ppFactor = map (map product) (partitions pFact)

-- Find the minimal product-sum number of order k
minProdSum :: Int -> Int
minProdSum n = head [k | k <- [n..], isProdSum k]
    where
        isProdSum k = not . null $ filter (==k) (map (\l -> n - length l + sum l) (factorize k))

-- Print and write
main :: IO()
main = do
        let ans  = (sum . nub) [minProdSum n | n <- [2..12000]]
        writeFile "pe88.txt" $ show ans
        print ans
