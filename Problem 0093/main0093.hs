{-

By using each of the digits from the set, {1, 2, 3, 4}, exactly once, and making use of the four arithmetic operations (+, −, *, /) and brackets/parentheses, it is possible to form different positive integer targets.

For example,

8 = (4 * (1 + 3)) / 2
14 = 4 * (3 + 1 / 2)
19 = 4 * (2 + 3) − 1
36 = 3 * 4 * (2 + 1)

Note that concatenations of the digits, like 12 + 34, are not allowed.

Using the set, {1, 2, 3, 4}, it is possible to obtain thirty-one different target numbers of which 36 is the maximum, and each of the numbers 1 to 28 can be obtained before encountering the first non-expressible number.

Find the set of four distinct digits, a < b < c < d, for which the longest set of consecutive positive integers, 1 to n, can be obtained, giving your answer as a string: abcd.

-}

import Data.List.Extra

-- Define the set of unique digit sets of size k and bound n, and the set that we will be using (k=4, n=9)
digitSets :: Int -> Int -> [[Int]]
digitSets 1 n = [[d] | d <- reverse [1..n]]
digitSets k n = [d:next | d <- reverse [(n-k-1)..n], next <- digitSets (k-1) (d-1)]
digitSet4 :: [[Int]]
digitSet4 = digitSets 4 9

-- Get the unique set of numbers that can be generated by a set of distinct 4-tuple digits
possibleN4 :: [Int] -> [Int]
possibleN4 ds = (sort . nubOrd) [ d | 
                                 [a1,a2,a3,a4] <- permutations ds, f1 <- ops, f2 <- ops, f3 <- ops,
                                 opOut <-   ([f3 (fromIntegral a4)] <*> 
                                            ([f2 (fromIntegral a3)] <*> 
                                            ([f1 (fromIntegral a2)] <*> 
                                             [fromIntegral a1]))), 
                                 let d = convertInt opOut, d > 0]
    where
        convertInt x = if x < 1 || x /= fromInteger (round x) then 0 else round x
        ops :: [Double -> Double -> Double]
        ops = [(+),(-),flip (-),(*),extDiv]
        extDiv n m = if m == 0 then 0 else n / m

-- Given a list of ordered numbers find the length of the longest chain of consecutive numbers starting from 1
nChain :: [Int] -> Int
nChain lst = length $ takeWhile (\(a,b) -> a==b) zipped
    where 
        zipped = zip lst [1..length lst]

-- Print and write
main :: IO()
main = do
        let ans  = (head . reverse . sort) [(nChain $ possibleN4 ds, reverse ds) | ds <- digitSet4]
        writeFile "pe93.txt" $ show ans
        print ans