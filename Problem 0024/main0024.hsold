-- What is the millionth lexicographic permutation of the digits
-- 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?

import          Data.List
import          Data.Word

-- Full credit goes to 
-- http://nayuki.eigenstate.org/page/next-lexicographical-permutation-algorithm
-- for the algorithm used

-- Find the longest non-decreasing sequence in a list
nDecSeq :: [Word] -> [Word]
nDecSeq (xh:xt) 
    | xt == [] || xh > (head xt) = [xh]
    | otherwise = xh : (nDecSeq xt)

-- Get the next permuation
nextPermutation :: [Word] -> [Word]
nextPermutation p = reverse $ reverse sufx ++ rest
    where   rp = reverse p
            nd = nDecSeq rp
            rest = tail $ drop (length nd) rp
            pvt = head $ drop (length nd) rp
            sufx0 = [(head . snd) $ partition (<pvt) nd]
            sufx1 = fst $ partition (<pvt) nd
            sufx2 = (tail . snd) $ partition (<pvt) nd
            sufx = sufx0 ++ sufx1 ++ [pvt] ++ sufx2

-- Print and write out the answer
main :: IO()
main = do
        let ansLst = iterate nextPermutation [0,1,2,3,4,5,6,7,8,9] !! (10^6-1)
        let ans = (concat . map show) ansLst
        writeFile "pe24.txt" ans
        print (read ans :: Integer)
